version: 2.1
parameters:
  workflow_id:
    type: string
    default: '${CIRCLE_WORKFLOW_ID:0:7}'

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        # default: ${CIRCLE_WORKFLOW_ID}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >>"
            aws cloudformation delete-stack \
            --stack-name CloudBootCamp-backend-<<parameters.workflow_id>>
            aws s3 rm s3://CloudBootCamp-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack \
            --stack-name CloudBootCamp-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/QzBHMNKN5qezXBzC4ojMCZ/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1')
            if (($SUCCESS == 1))
            then
              cd ~/project/backend
              npm install
              npm run build
              npm run migrations:revert 
            fi

jobs:
  build-backend:
    docker:
      - image: cimg/node:20.5.0
    working_directory: ~/Downloads/BootcampProject/backend
    steps:
      - checkout
      - restore_cache:
          key: backend-deps-{{ checksum "backend/package-lock.json" }}
          paths:
            - backend/node_modules
      - run:
          name: Back-end build
          command: |
            cd backend
            npm cache clean -f
            npm install -g npm@latest
            npm install
            npm run build
      - save_cache:
          key: backend-deps-{{ checksum "backend/package-lock.json" }}
          paths:
            - backend/node_modules

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    working_directory: ~/Downloads/BootcampProject/backend
    steps:
      - checkout
      - restore_cache:
          key: backend-deps-{{ checksum "backend/package-lock.json" }}
          paths:
            - backend/node_modules
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          key: backend-deps-{{ checksum "backend/package-lock.json" }}
          paths:
            - backend/node_modules

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    working_directory: ~/Downloads/BootcampProject/backend
    steps:
      - checkout
      - restore_cache:
          key: backend-deps-{{ checksum "backend/package-lock.json" }}
          paths:
            - backend/node_modules
      - run:
          name: Scan backend for vulnerabilities
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical 
            npm audit fix --force --audit-level=critical 
            npm audit --audit-level=critical
      - save_cache:
          key: backend-deps-{{ checksum "backend/package-lock.json" }}
          paths:
            - backend/node_modules
  
  add-prometheus-node-exporter:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'a7:f2:0c:5d:9d:14:31:a9:27:39:42:51:a1:bb:8b:03:0a:a5:e9:66'
      - run:
          name: Install dependencies
          command: |
            apk add --update aws-cli tar gzip ansible nodejs npm
      - attach_workspace:
          at: ~/
      - run:
          name: Setup Prometheus Node Exporter
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt node-exporter.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a7:f2:0c:5d:9d:14:31:a9:27:39:42:51:a1:bb:8b:03:0a:a5:e9:66"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml -vvv
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: apk add --update ansible
      - run:
          name: Install AWS CLI
          command: apk add --no-cache aws-cli
      - run:
          name: Install CURL
          command: apk add curl
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  lint-and-capture-screenshots:
    docker:
      - image: circleci/node:14 
    working_directory: ~/Downloads/BootcampProject/backend
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: npm install
      - run:
          name: Run Linting
          command: npm run lint
      - run:
          name: Capture Linting Screenshot
          when: on_fail
          command: |
            npm install puppeteer
            node capture-screenshot.js failure

  build-and-push-to-ecr:
    docker:
      - image: circleci/node:14 
    working_directory: ~/Downloads/BootcampProject/backend
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: npm install
      - run:
          name: Run Tests
          command: npm test
      - run:
          name: Linting
          command: npm run lint
      - run:
          name: Build and Push to ECR
          command: |
            echo ${AWS_ACCESS_KEY_ID}:${AWS_SECRET_ACCESS_KEY} | docker login -u adedaryorh --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            docker build -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/my-node-app:${CIRCLE_SHA1} .
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/my-node-app:${CIRCLE_SHA1}

  deploy-backend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a7:f2:0c:5d:9d:14:31:a9:27:39:42:51:a1:bb:8b:03:0a:a5:e9:66"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            ansible --version
            apk add --update --no-cache tar gzip openssh nodejs npm curl
            pip install awscli
            aws --version
      - run:
          name: Package Backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is ------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            apk add --update npm
            apk add --update nodejs
            apk add --no-cache aws-cli
            apk add curl
      - run:
          name: Get backend URL and run backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            sleep 2m
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm curl
            pip install awscli
      - run:
          name: Update CloudFront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=CloudBootCamp
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and remove stacks
          command: |
            echo $CIRCLE_WORKFLOW_ID
            export OldWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}  # Correctly set OldWorkflowID

            STACKS=$(aws cloudformation list-stacks \
              --query "StackSummaries[?StackStatus=='CREATE_COMPLETE'].StackName" \
              --output text)
            
            for STACK in $STACKS; do
              if [[ "$STACK" == *"${OldWorkflowID}"* ]]; then
                echo "----------Cleaning up stack: $STACK------------"
                aws cloudformation delete-stack --stack-name "$STACK"
              fi
            done


            
workflows:
  default:
    jobs:
      - build-backend
      # - test-backend
      # - scan-backend
      # - add-prometheus-node-exporter:
      #     requires:
      #       - scan-backend
      # - configure-infrastructure:
      #     requires:
      #       - add-prometheus-node-exporter
      # - run-migrations:
      #     requires:
      #       - configure-infrastructure
      # - lint-and-capture-screenshots:
      #     requires:
      #       - test-backend
      # - build-and-push-to-ecr:
      #     requires:
      #       - lint-and-capture-screenshots
      # - deploy-backend:
      #     requires:
      #       - run-migrations
      # - smoke-test:
      #     requires:
      #       - deploy-backend
      # - cloudfront-update:
      #     requires:
      #       - smoke-test
      # - cleanup
